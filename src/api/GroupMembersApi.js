/**
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateGroupMembers from '../model/CreateGroupMembers';
import GetGroupMembersById from '../model/GetGroupMembersById';
import GroupMembersEditable from '../model/GroupMembersEditable';
import InlineResponse2004 from '../model/InlineResponse2004';
import InlineResponse2005 from '../model/InlineResponse2005';
import InlineResponse2006 from '../model/InlineResponse2006';

/**
* GroupMembers service.
* @module api/GroupMembersApi
* @version 1.0.0
*/
export default class GroupMembersApi {

    /**
    * Constructs a new GroupMembersApi. 
    * @alias module:api/GroupMembersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createGroupMember operation.
     * @callback module:api/GroupMembersApi~createGroupMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGroupMembers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a new group member
     * Store a newly created resource in storage.
     * @param {module:model/GroupMembersEditable} groupMembersEditable 
     * @param {module:api/GroupMembersApi~createGroupMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGroupMembers}
     */
    createGroupMember(groupMembersEditable, callback) {
      let postBody = groupMembersEditable;
      // verify the required parameter 'groupMembersEditable' is set
      if (groupMembersEditable === undefined || groupMembersEditable === null) {
        throw new Error("Missing the required parameter 'groupMembersEditable' when calling createGroupMember");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGroupMembers;
      return this.apiClient.callApi(
        '/group_members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGroupMember operation.
     * @callback module:api/GroupMembersApi~deleteGroupMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a group member
     * Delete a group membership
     * @param {String} groupMemberId ID of group_members to return
     * @param {module:api/GroupMembersApi~deleteGroupMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroupMember(groupMemberId, callback) {
      let postBody = null;
      // verify the required parameter 'groupMemberId' is set
      if (groupMemberId === undefined || groupMemberId === null) {
        throw new Error("Missing the required parameter 'groupMemberId' when calling deleteGroupMember");
      }

      let pathParams = {
        'group_member_id': groupMemberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/group_members/{group_member_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupMemberById operation.
     * @callback module:api/GroupMembersApi~getGroupMemberByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGroupMembersById} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get single group member by ID
     * Display the specified resource.
     * @param {String} groupMemberId ID of group members to return
     * @param {module:api/GroupMembersApi~getGroupMemberByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGroupMembersById}
     */
    getGroupMemberById(groupMemberId, callback) {
      let postBody = null;
      // verify the required parameter 'groupMemberId' is set
      if (groupMemberId === undefined || groupMemberId === null) {
        throw new Error("Missing the required parameter 'groupMemberId' when calling getGroupMemberById");
      }

      let pathParams = {
        'group_member_id': groupMemberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGroupMembersById;
      return this.apiClient.callApi(
        '/group_members/{group_member_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupMembers operation.
     * @callback module:api/GroupMembersApi~getGroupMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all groups for a given member
     * Display a listing of the resource.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.memberId 
     * @param {String} opts.orderBy Field to order results by
     * @param {module:model/String} opts.orderDirection  (default to 'asc')
     * @param {Number} opts.perPage 
     * @param {module:api/GroupMembersApi~getGroupMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    getGroupMembers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'member_id': opts['memberId'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/group_members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupMembersAvailable operation.
     * @callback module:api/GroupMembersApi~getGroupMembersAvailableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all groups available for a given member
     * Display a listing of groups available
     * @param {String} memberId ID of group member to return
     * @param {String} memberType type of group member to return
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring.
     * @param {String} opts.orderBy Field to order results by
     * @param {module:model/String} opts.orderDirection  (default to 'asc')
     * @param {Number} opts.perPage 
     * @param {module:api/GroupMembersApi~getGroupMembersAvailableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2006}
     */
    getGroupMembersAvailable(memberId, memberType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling getGroupMembersAvailable");
      }
      // verify the required parameter 'memberType' is set
      if (memberType === undefined || memberType === null) {
        throw new Error("Missing the required parameter 'memberType' when calling getGroupMembersAvailable");
      }

      let pathParams = {
        'member_id': memberId,
        'member_type': memberType
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;
      return this.apiClient.callApi(
        '/group_members_available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserMembersAvailable operation.
     * @callback module:api/GroupMembersApi~getUserMembersAvailableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all users available for a given group
     * Display a listing of users available
     * @param {String} groupId ID of group to return
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter results by string. Searches Name. Can be a substring.
     * @param {String} opts.orderBy Field to order results by
     * @param {module:model/String} opts.orderDirection  (default to 'asc')
     * @param {Number} opts.perPage 
     * @param {module:api/GroupMembersApi~getUserMembersAvailableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    getUserMembersAvailable(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getUserMembersAvailable");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;
      return this.apiClient.callApi(
        '/user_members_available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
