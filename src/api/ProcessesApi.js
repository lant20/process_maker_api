/**
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse20010 from '../model/InlineResponse20010';
import InlineResponse20011 from '../model/InlineResponse20011';
import InlineResponse20012 from '../model/InlineResponse20012';
import InlineResponse2009 from '../model/InlineResponse2009';
import Process from '../model/Process';
import ProcessAssignments from '../model/ProcessAssignments';
import ProcessEditable from '../model/ProcessEditable';
import ProcessImport from '../model/ProcessImport';
import ProcessRequest from '../model/ProcessRequest';

/**
* Processes service.
* @module api/ProcessesApi
* @version 1.0.0
*/
export default class ProcessesApi {

    /**
    * Constructs a new ProcessesApi. 
    * @alias module:api/ProcessesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assignmentProcess operation.
     * @callback module:api/ProcessesApi~assignmentProcessCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update assignments after import
     * Import Assignments of process.
     * @param {Number} processId ID of process to return
     * @param {module:model/ProcessAssignments} processAssignments 
     * @param {module:api/ProcessesApi~assignmentProcessCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assignmentProcess(processId, processAssignments, callback) {
      let postBody = processAssignments;
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling assignmentProcess");
      }
      // verify the required parameter 'processAssignments' is set
      if (processAssignments === undefined || processAssignments === null) {
        throw new Error("Missing the required parameter 'processAssignments' when calling assignmentProcess");
      }

      let pathParams = {
        'process_id': processId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/processes/{process_id}/import/assignments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call6a131993b7c879ddcd3d3a291dd8380f operation.
     * @callback module:api/ProcessesApi~call6a131993b7c879ddcd3d3a291dd8380fCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if the import is ready
     * Check if the import is ready
     * @param {String} code Import code
     * @param {module:api/ProcessesApi~call6a131993b7c879ddcd3d3a291dd8380fCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20012}
     */
    call6a131993b7c879ddcd3d3a291dd8380f(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling call6a131993b7c879ddcd3d3a291dd8380f");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20012;
      return this.apiClient.callApi(
        '/processes/import/{code}/is_ready', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProcess operation.
     * @callback module:api/ProcessesApi~createProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Process} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a new process
     * Store a newly created resource in storage.
     * @param {module:model/ProcessEditable} processEditable 
     * @param {module:api/ProcessesApi~createProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Process}
     */
    createProcess(processEditable, callback) {
      let postBody = processEditable;
      // verify the required parameter 'processEditable' is set
      if (processEditable === undefined || processEditable === null) {
        throw new Error("Missing the required parameter 'processEditable' when calling createProcess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Process;
      return this.apiClient.callApi(
        '/processes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProcess operation.
     * @callback module:api/ProcessesApi~deleteProcessCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a process
     * Remove the specified resource from storage.
     * @param {Number} processId ID of process to return
     * @param {module:api/ProcessesApi~deleteProcessCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProcess(processId, callback) {
      let postBody = null;
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling deleteProcess");
      }

      let pathParams = {
        'processId': processId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/processes/{processId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportProcess operation.
     * @callback module:api/ProcessesApi~exportProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export a single process by ID and return a URL to download it
     * Export the specified process.
     * @param {Number} processId ID of process to export
     * @param {module:api/ProcessesApi~exportProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20011}
     */
    exportProcess(processId, callback) {
      let postBody = null;
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling exportProcess");
      }

      let pathParams = {
        'processId': processId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20011;
      return this.apiClient.callApi(
        '/processes/{processId}/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProcessById operation.
     * @callback module:api/ProcessesApi~getProcessByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Process} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get single process by ID
     * Display the specified resource.
     * @param {Number} processId ID of process to return
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Include data from related models in payload. Comma separated list. (default to '')
     * @param {module:api/ProcessesApi~getProcessByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Process}
     */
    getProcessById(processId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling getProcessById");
      }

      let pathParams = {
        'processId': processId
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Process;
      return this.apiClient.callApi(
        '/processes/{processId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProcesses operation.
     * @callback module:api/ProcessesApi~getProcessesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all processes that the user has access to
     * Get list Process
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring.
     * @param {String} opts.orderBy Field to order results by
     * @param {module:model/String} opts.orderDirection  (default to 'asc')
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.status ACTIVE or INACTIVE
     * @param {String} opts.include Include data from related models in payload. Comma separated list. (default to '')
     * @param {module:api/ProcessesApi~getProcessesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2009}
     */
    getProcesses(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'per_page': opts['perPage'],
        'status': opts['status'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2009;
      return this.apiClient.callApi(
        '/processes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importProcess operation.
     * @callback module:api/ProcessesApi~importProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessImport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import a new process
     * Import the specified process.
     * @param {Object} opts Optional parameters
     * @param {File} opts.file file to import
     * @param {module:api/ProcessesApi~importProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessImport}
     */
    importProcess(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ProcessImport;
      return this.apiClient.callApi(
        '/processes/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreProcess operation.
     * @callback module:api/ProcessesApi~restoreProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Process} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore an inactive process
     * Reverses the soft delete of the element
     * @param {Number} processId ID of process to return
     * @param {module:api/ProcessesApi~restoreProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Process}
     */
    restoreProcess(processId, callback) {
      let postBody = null;
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling restoreProcess");
      }

      let pathParams = {
        'processId': processId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Process;
      return this.apiClient.callApi(
        '/processes/{processId}/restore', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startProcesses operation.
     * @callback module:api/ProcessesApi~startProcessesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of processes that the user can start
     * Returns the list of processes that the user can start.
     * @param {Boolean} withoutEventDefinitions If true return only processes that haven't start event definitions
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring.
     * @param {String} opts.orderBy Field to order results by
     * @param {module:model/String} opts.orderDirection  (default to 'asc')
     * @param {Number} opts.perPage 
     * @param {String} opts.include Include data from related models in payload. Comma separated list. (default to '')
     * @param {module:api/ProcessesApi~startProcessesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20010}
     */
    startProcesses(withoutEventDefinitions, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'withoutEventDefinitions' is set
      if (withoutEventDefinitions === undefined || withoutEventDefinitions === null) {
        throw new Error("Missing the required parameter 'withoutEventDefinitions' when calling startProcesses");
      }

      let pathParams = {
        'without_event_definitions': withoutEventDefinitions
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'per_page': opts['perPage'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20010;
      return this.apiClient.callApi(
        '/start_processes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the triggerStartEvent operation.
     * @callback module:api/ProcessesApi~triggerStartEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a new process
     * Trigger an start event within a process.
     * @param {Number} processId ID of process to return
     * @param {String} event Node ID of the start event
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body data that will be stored as part of the created request
     * @param {module:api/ProcessesApi~triggerStartEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessRequest}
     */
    triggerStartEvent(processId, event, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling triggerStartEvent");
      }
      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling triggerStartEvent");
      }

      let pathParams = {
        'process_id': processId
      };
      let queryParams = {
        'event': event
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessRequest;
      return this.apiClient.callApi(
        '/process_events/{process_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProcess operation.
     * @callback module:api/ProcessesApi~updateProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Process} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a process
     * Updates the current element
     * @param {Number} processId ID of process to return
     * @param {module:model/ProcessEditable} processEditable 
     * @param {module:api/ProcessesApi~updateProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Process}
     */
    updateProcess(processId, processEditable, callback) {
      let postBody = processEditable;
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling updateProcess");
      }
      // verify the required parameter 'processEditable' is set
      if (processEditable === undefined || processEditable === null) {
        throw new Error("Missing the required parameter 'processEditable' when calling updateProcess");
      }

      let pathParams = {
        'processId': processId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Process;
      return this.apiClient.callApi(
        '/processes/{processId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
