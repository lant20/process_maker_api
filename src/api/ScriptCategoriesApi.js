/**
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse20018 from '../model/InlineResponse20018';
import ScriptCategory from '../model/ScriptCategory';
import ScriptCategoryEditable from '../model/ScriptCategoryEditable';

/**
* ScriptCategories service.
* @module api/ScriptCategoriesApi
* @version 1.0.0
*/
export default class ScriptCategoriesApi {

    /**
    * Constructs a new ScriptCategoriesApi. 
    * @alias module:api/ScriptCategoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createScriptCategory operation.
     * @callback module:api/ScriptCategoriesApi~createScriptCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a new Script Category
     * Store a newly created Script Category in storage
     * @param {module:model/ScriptCategoryEditable} scriptCategoryEditable 
     * @param {module:api/ScriptCategoriesApi~createScriptCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptCategory}
     */
    createScriptCategory(scriptCategoryEditable, callback) {
      let postBody = scriptCategoryEditable;
      // verify the required parameter 'scriptCategoryEditable' is set
      if (scriptCategoryEditable === undefined || scriptCategoryEditable === null) {
        throw new Error("Missing the required parameter 'scriptCategoryEditable' when calling createScriptCategory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScriptCategory;
      return this.apiClient.callApi(
        '/script_categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScriptCategory operation.
     * @callback module:api/ScriptCategoriesApi~deleteScriptCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a script category
     * Remove the specified resource from storage.
     * @param {String} scriptCategoryId ID of script category to return
     * @param {module:api/ScriptCategoriesApi~deleteScriptCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScriptCategory(scriptCategoryId, callback) {
      let postBody = null;
      // verify the required parameter 'scriptCategoryId' is set
      if (scriptCategoryId === undefined || scriptCategoryId === null) {
        throw new Error("Missing the required parameter 'scriptCategoryId' when calling deleteScriptCategory");
      }

      let pathParams = {
        'script_category_id': scriptCategoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/script_categories/{script_category_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScriptCategories operation.
     * @callback module:api/ScriptCategoriesApi~getScriptCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20018} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all scripts categories that the user has access to
     * Display a listing of the Script Categories.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter results by string. Searches Name, Description, and Status. All fields must match exactly.
     * @param {String} opts.orderBy Field to order results by
     * @param {module:model/String} opts.orderDirection  (default to 'asc')
     * @param {Number} opts.perPage 
     * @param {module:api/ScriptCategoriesApi~getScriptCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20018}
     */
    getScriptCategories(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20018;
      return this.apiClient.callApi(
        '/script_categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScriptCategoryById operation.
     * @callback module:api/ScriptCategoriesApi~getScriptCategoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get single script category by ID
     * Display the specified script category.
     * @param {String} scriptCategoryId ID of script category to return
     * @param {module:api/ScriptCategoriesApi~getScriptCategoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptCategory}
     */
    getScriptCategoryById(scriptCategoryId, callback) {
      let postBody = null;
      // verify the required parameter 'scriptCategoryId' is set
      if (scriptCategoryId === undefined || scriptCategoryId === null) {
        throw new Error("Missing the required parameter 'scriptCategoryId' when calling getScriptCategoryById");
      }

      let pathParams = {
        'script_category_id': scriptCategoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScriptCategory;
      return this.apiClient.callApi(
        '/script_categories/{script_category_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScriptCategory operation.
     * @callback module:api/ScriptCategoriesApi~updateScriptCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a script Category
     * Updates the current element
     * @param {String} scriptCategoryId ID of script category to return
     * @param {module:model/ScriptCategoryEditable} scriptCategoryEditable 
     * @param {module:api/ScriptCategoriesApi~updateScriptCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptCategory}
     */
    updateScriptCategory(scriptCategoryId, scriptCategoryEditable, callback) {
      let postBody = scriptCategoryEditable;
      // verify the required parameter 'scriptCategoryId' is set
      if (scriptCategoryId === undefined || scriptCategoryId === null) {
        throw new Error("Missing the required parameter 'scriptCategoryId' when calling updateScriptCategory");
      }
      // verify the required parameter 'scriptCategoryEditable' is set
      if (scriptCategoryEditable === undefined || scriptCategoryEditable === null) {
        throw new Error("Missing the required parameter 'scriptCategoryEditable' when calling updateScriptCategory");
      }

      let pathParams = {
        'script_category_id': scriptCategoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScriptCategory;
      return this.apiClient.callApi(
        '/script_categories/{script_category_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
