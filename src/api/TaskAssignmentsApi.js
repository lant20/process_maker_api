/**
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse20028 from '../model/InlineResponse20028';
import InlineResponse404 from '../model/InlineResponse404';
import InlineResponse422 from '../model/InlineResponse422';
import TaskAssignments from '../model/TaskAssignments';
import TaskAssignmentsEditable from '../model/TaskAssignmentsEditable';

/**
* TaskAssignments service.
* @module api/TaskAssignmentsApi
* @version 1.0.0
*/
export default class TaskAssignmentsApi {

    /**
    * Constructs a new TaskAssignmentsApi. 
    * @alias module:api/TaskAssignmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTaskAssignments operation.
     * @callback module:api/TaskAssignmentsApi~createTaskAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskAssignments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a new Task Assignment
     * Store a newly created task assignment in storage.
     * @param {module:model/TaskAssignmentsEditable} taskAssignmentsEditable 
     * @param {module:api/TaskAssignmentsApi~createTaskAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskAssignments}
     */
    createTaskAssignments(taskAssignmentsEditable, callback) {
      let postBody = taskAssignmentsEditable;
      // verify the required parameter 'taskAssignmentsEditable' is set
      if (taskAssignmentsEditable === undefined || taskAssignmentsEditable === null) {
        throw new Error("Missing the required parameter 'taskAssignmentsEditable' when calling createTaskAssignments");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TaskAssignments;
      return this.apiClient.callApi(
        '/task_assignments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaskAssignments operation.
     * @callback module:api/TaskAssignmentsApi~deleteTaskAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Task Assignment
     * Remove an assignment
     * @param {Number} taskAssignment ID of task assignment to delete
     * @param {module:model/TaskAssignmentsEditable} taskAssignmentsEditable 
     * @param {module:api/TaskAssignmentsApi~deleteTaskAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTaskAssignments(taskAssignment, taskAssignmentsEditable, callback) {
      let postBody = taskAssignmentsEditable;
      // verify the required parameter 'taskAssignment' is set
      if (taskAssignment === undefined || taskAssignment === null) {
        throw new Error("Missing the required parameter 'taskAssignment' when calling deleteTaskAssignments");
      }
      // verify the required parameter 'taskAssignmentsEditable' is set
      if (taskAssignmentsEditable === undefined || taskAssignmentsEditable === null) {
        throw new Error("Missing the required parameter 'taskAssignmentsEditable' when calling deleteTaskAssignments");
      }

      let pathParams = {
        'task_assignment': taskAssignment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/task_assignments/{task_assignment}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskAssignments operation.
     * @callback module:api/TaskAssignmentsApi~getTaskAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20028} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all task assignments
     * Display a listing of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring.
     * @param {String} opts.orderBy Field to order results by
     * @param {module:model/String} opts.orderDirection  (default to 'asc')
     * @param {Number} opts.perPage 
     * @param {module:api/TaskAssignmentsApi~getTaskAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20028}
     */
    getTaskAssignments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20028;
      return this.apiClient.callApi(
        '/task_assignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaskAssignments operation.
     * @callback module:api/TaskAssignmentsApi~updateTaskAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Task Assignment
     * Update a task assignment
     * @param {Number} taskAssignment ID of task assignment to update
     * @param {module:model/TaskAssignmentsEditable} taskAssignmentsEditable 
     * @param {module:api/TaskAssignmentsApi~updateTaskAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTaskAssignments(taskAssignment, taskAssignmentsEditable, callback) {
      let postBody = taskAssignmentsEditable;
      // verify the required parameter 'taskAssignment' is set
      if (taskAssignment === undefined || taskAssignment === null) {
        throw new Error("Missing the required parameter 'taskAssignment' when calling updateTaskAssignments");
      }
      // verify the required parameter 'taskAssignmentsEditable' is set
      if (taskAssignmentsEditable === undefined || taskAssignmentsEditable === null) {
        throw new Error("Missing the required parameter 'taskAssignmentsEditable' when calling updateTaskAssignments");
      }

      let pathParams = {
        'task_assignment': taskAssignment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/task_assignments/{task_assignment}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
