/**
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse20026 from '../model/InlineResponse20026';
import InlineResponse404 from '../model/InlineResponse404';
import InlineResponse422 from '../model/InlineResponse422';
import SettingsEditable from '../model/SettingsEditable';

/**
* Settings service.
* @module api/SettingsApi
* @version 1.0.0
*/
export default class SettingsApi {

    /**
    * Constructs a new SettingsApi. 
    * @alias module:api/SettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSettings operation.
     * @callback module:api/SettingsApi~getSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20026} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all settings
     * Display a listing of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring.
     * @param {String} opts.orderBy Field to order results by
     * @param {module:model/String} opts.orderDirection  (default to 'asc')
     * @param {Number} opts.perPage 
     * @param {String} opts.include Include data from related models in payload. Comma separated list. (default to '')
     * @param {module:api/SettingsApi~getSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20026}
     */
    getSettings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'per_page': opts['perPage'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20026;
      return this.apiClient.callApi(
        '/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSetting operation.
     * @callback module:api/SettingsApi~updateSettingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a setting
     * Update a setting
     * @param {Number} settingId ID of setting to return
     * @param {module:model/SettingsEditable} settingsEditable 
     * @param {module:api/SettingsApi~updateSettingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSetting(settingId, settingsEditable, callback) {
      let postBody = settingsEditable;
      // verify the required parameter 'settingId' is set
      if (settingId === undefined || settingId === null) {
        throw new Error("Missing the required parameter 'settingId' when calling updateSetting");
      }
      // verify the required parameter 'settingsEditable' is set
      if (settingsEditable === undefined || settingsEditable === null) {
        throw new Error("Missing the required parameter 'settingsEditable' when calling updateSetting");
      }

      let pathParams = {
        'setting_id': settingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/settings/{setting_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
