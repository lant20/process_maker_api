/**
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject12 from '../model/InlineObject12';
import InlineResponse20020 from '../model/InlineResponse20020';
import InlineResponse20021 from '../model/InlineResponse20021';
import InlineResponse20022 from '../model/InlineResponse20022';
import InlineResponse20023 from '../model/InlineResponse20023';
import ScriptExecutorsEditable from '../model/ScriptExecutorsEditable';

/**
* RebuildScriptExecutors service.
* @module api/RebuildScriptExecutorsApi
* @version 1.0.0
*/
export default class RebuildScriptExecutorsApi {

    /**
    * Constructs a new RebuildScriptExecutorsApi. 
    * @alias module:api/RebuildScriptExecutorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelScriptExecutor operation.
     * @callback module:api/RebuildScriptExecutorsApi~cancelScriptExecutorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a script executor
     * Cancel a script executor
     * @param {module:model/InlineObject12} inlineObject12 
     * @param {module:api/RebuildScriptExecutorsApi~cancelScriptExecutorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20021}
     */
    cancelScriptExecutor(inlineObject12, callback) {
      let postBody = inlineObject12;
      // verify the required parameter 'inlineObject12' is set
      if (inlineObject12 === undefined || inlineObject12 === null) {
        throw new Error("Missing the required parameter 'inlineObject12' when calling cancelScriptExecutor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20021;
      return this.apiClient.callApi(
        '/script-executors/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createScriptExecutor operation.
     * @callback module:api/RebuildScriptExecutorsApi~createScriptExecutorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a script executor
     * Create a script executor
     * @param {module:model/ScriptExecutorsEditable} scriptExecutorsEditable 
     * @param {module:api/RebuildScriptExecutorsApi~createScriptExecutorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20021}
     */
    createScriptExecutor(scriptExecutorsEditable, callback) {
      let postBody = scriptExecutorsEditable;
      // verify the required parameter 'scriptExecutorsEditable' is set
      if (scriptExecutorsEditable === undefined || scriptExecutorsEditable === null) {
        throw new Error("Missing the required parameter 'scriptExecutorsEditable' when calling createScriptExecutor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20021;
      return this.apiClient.callApi(
        '/script-executors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScriptExecutor operation.
     * @callback module:api/RebuildScriptExecutorsApi~deleteScriptExecutorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20022} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a script executor
     * Delete a script executor
     * @param {String} scriptExecutor ID of script executor to return
     * @param {module:api/RebuildScriptExecutorsApi~deleteScriptExecutorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20022}
     */
    deleteScriptExecutor(scriptExecutor, callback) {
      let postBody = null;
      // verify the required parameter 'scriptExecutor' is set
      if (scriptExecutor === undefined || scriptExecutor === null) {
        throw new Error("Missing the required parameter 'scriptExecutor' when calling deleteScriptExecutor");
      }

      let pathParams = {
        'script_executor': scriptExecutor
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20022;
      return this.apiClient.callApi(
        '/script-executors/{script_executor}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvailableLanguages operation.
     * @callback module:api/RebuildScriptExecutorsApi~getAvailableLanguagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20023} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all available languages
     * Get a list of available languages.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring.
     * @param {String} opts.orderBy Field to order results by
     * @param {module:model/String} opts.orderDirection  (default to 'asc')
     * @param {Number} opts.perPage 
     * @param {module:api/RebuildScriptExecutorsApi~getAvailableLanguagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20023}
     */
    getAvailableLanguages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20023;
      return this.apiClient.callApi(
        '/script-executors/available-languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScriptExecutors operation.
     * @callback module:api/RebuildScriptExecutorsApi~getScriptExecutorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20020} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all script executors that the user has access to
     * Get a list of script executors.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring.
     * @param {String} opts.orderBy Field to order results by
     * @param {module:model/String} opts.orderDirection  (default to 'asc')
     * @param {Number} opts.perPage 
     * @param {module:api/RebuildScriptExecutorsApi~getScriptExecutorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20020}
     */
    getScriptExecutors(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20020;
      return this.apiClient.callApi(
        '/script-executors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScriptExecutor operation.
     * @callback module:api/RebuildScriptExecutorsApi~updateScriptExecutorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20022} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update script executor
     * Update and rebuild the script executor
     * @param {String} scriptExecutor ID of script executor to return
     * @param {module:model/ScriptExecutorsEditable} scriptExecutorsEditable 
     * @param {module:api/RebuildScriptExecutorsApi~updateScriptExecutorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20022}
     */
    updateScriptExecutor(scriptExecutor, scriptExecutorsEditable, callback) {
      let postBody = scriptExecutorsEditable;
      // verify the required parameter 'scriptExecutor' is set
      if (scriptExecutor === undefined || scriptExecutor === null) {
        throw new Error("Missing the required parameter 'scriptExecutor' when calling updateScriptExecutor");
      }
      // verify the required parameter 'scriptExecutorsEditable' is set
      if (scriptExecutorsEditable === undefined || scriptExecutorsEditable === null) {
        throw new Error("Missing the required parameter 'scriptExecutorsEditable' when calling updateScriptExecutor");
      }

      let pathParams = {
        'script_executor': scriptExecutor
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20022;
      return this.apiClient.callApi(
        '/script-executors/{script_executor}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
