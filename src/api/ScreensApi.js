/**
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject9 from '../model/InlineObject9';
import InlineResponse20017 from '../model/InlineResponse20017';
import InlineResponse201 from '../model/InlineResponse201';
import ScreenExported from '../model/ScreenExported';
import Screens from '../model/Screens';
import ScreensEditable from '../model/ScreensEditable';

/**
* Screens service.
* @module api/ScreensApi
* @version 1.0.0
*/
export default class ScreensApi {

    /**
    * Constructs a new ScreensApi. 
    * @alias module:api/ScreensApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createScreen operation.
     * @callback module:api/ScreensApi~createScreenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Screens} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a new screens
     * Create a new Screen.
     * @param {module:model/ScreensEditable} screensEditable 
     * @param {module:api/ScreensApi~createScreenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Screens}
     */
    createScreen(screensEditable, callback) {
      let postBody = screensEditable;
      // verify the required parameter 'screensEditable' is set
      if (screensEditable === undefined || screensEditable === null) {
        throw new Error("Missing the required parameter 'screensEditable' when calling createScreen");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Screens;
      return this.apiClient.callApi(
        '/screens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScreen operation.
     * @callback module:api/ScreensApi~deleteScreenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a screen
     * Delete a Screen.
     * @param {String} screensId ID of screen to return
     * @param {module:api/ScreensApi~deleteScreenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScreen(screensId, callback) {
      let postBody = null;
      // verify the required parameter 'screensId' is set
      if (screensId === undefined || screensId === null) {
        throw new Error("Missing the required parameter 'screensId' when calling deleteScreen");
      }

      let pathParams = {
        'screens_id': screensId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/screens/{screens_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the duplicateScreen operation.
     * @callback module:api/ScreensApi~duplicateScreenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Screens} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * duplicate a screen
     * duplicate a Screen.
     * @param {String} screensId ID of screen to return
     * @param {module:model/ScreensEditable} screensEditable 
     * @param {module:api/ScreensApi~duplicateScreenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Screens}
     */
    duplicateScreen(screensId, screensEditable, callback) {
      let postBody = screensEditable;
      // verify the required parameter 'screensId' is set
      if (screensId === undefined || screensId === null) {
        throw new Error("Missing the required parameter 'screensId' when calling duplicateScreen");
      }
      // verify the required parameter 'screensEditable' is set
      if (screensEditable === undefined || screensEditable === null) {
        throw new Error("Missing the required parameter 'screensEditable' when calling duplicateScreen");
      }

      let pathParams = {
        'screens_id': screensId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Screens;
      return this.apiClient.callApi(
        '/screens/{screens_id}/duplicate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportScreen operation.
     * @callback module:api/ScreensApi~exportScreenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScreenExported} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export a single screen by ID
     * Export the specified screen.
     * @param {String} screensId ID of screen to return
     * @param {module:api/ScreensApi~exportScreenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScreenExported}
     */
    exportScreen(screensId, callback) {
      let postBody = null;
      // verify the required parameter 'screensId' is set
      if (screensId === undefined || screensId === null) {
        throw new Error("Missing the required parameter 'screensId' when calling exportScreen");
      }

      let pathParams = {
        'screensId': screensId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScreenExported;
      return this.apiClient.callApi(
        '/screens/{screensId}/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScreens operation.
     * @callback module:api/ScreensApi~getScreensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20017} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all screens that the user has access to
     * Get a list of Screens.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring.
     * @param {String} opts.orderBy Field to order results by
     * @param {module:model/String} opts.orderDirection  (default to 'asc')
     * @param {Number} opts.perPage 
     * @param {String} opts.include Include data from related models in payload. Comma separated list. (default to '')
     * @param {String} opts.exclude Comma separated list of fields to exclude from the response (default to '')
     * @param {module:api/ScreensApi~getScreensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20017}
     */
    getScreens(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20017;
      return this.apiClient.callApi(
        '/screens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScreensById operation.
     * @callback module:api/ScreensApi~getScreensByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Screens} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get single screens by ID
     * Get a single Screen.
     * @param {String} screensId ID of screens to return
     * @param {module:api/ScreensApi~getScreensByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Screens}
     */
    getScreensById(screensId, callback) {
      let postBody = null;
      // verify the required parameter 'screensId' is set
      if (screensId === undefined || screensId === null) {
        throw new Error("Missing the required parameter 'screensId' when calling getScreensById");
      }

      let pathParams = {
        'screens_id': screensId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Screens;
      return this.apiClient.callApi(
        '/screens/{screens_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importScreen operation.
     * @callback module:api/ScreensApi~importScreenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import a new screen
     * Import the specified screen.
     * @param {Object} opts Optional parameters
     * @param {File} opts.file file to import
     * @param {module:api/ScreensApi~importScreenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    importScreen(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/screens/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the preview operation.
     * @callback module:api/ScreensApi~previewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Screens} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preview a screen
     * Get preview a screen
     * @param {module:model/InlineObject9} inlineObject9 
     * @param {module:api/ScreensApi~previewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Screens}
     */
    preview(inlineObject9, callback) {
      let postBody = inlineObject9;
      // verify the required parameter 'inlineObject9' is set
      if (inlineObject9 === undefined || inlineObject9 === null) {
        throw new Error("Missing the required parameter 'inlineObject9' when calling preview");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Screens;
      return this.apiClient.callApi(
        '/screens/preview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScreen operation.
     * @callback module:api/ScreensApi~updateScreenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a screen
     * Update a Screen.
     * @param {String} screensId ID of screen to return
     * @param {module:model/ScreensEditable} screensEditable 
     * @param {module:api/ScreensApi~updateScreenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateScreen(screensId, screensEditable, callback) {
      let postBody = screensEditable;
      // verify the required parameter 'screensId' is set
      if (screensId === undefined || screensId === null) {
        throw new Error("Missing the required parameter 'screensId' when calling updateScreen");
      }
      // verify the required parameter 'screensEditable' is set
      if (screensEditable === undefined || screensEditable === null) {
        throw new Error("Missing the required parameter 'screensEditable' when calling updateScreen");
      }

      let pathParams = {
        'screens_id': screensId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/screens/{screens_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
