/**
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse20013 from '../model/InlineResponse20013';
import InlineResponse404 from '../model/InlineResponse404';
import ProcessRequest from '../model/ProcessRequest';
import ProcessRequestEditable from '../model/ProcessRequestEditable';

/**
* ProcessRequests service.
* @module api/ProcessRequestsApi
* @version 1.0.0
*/
export default class ProcessRequestsApi {

    /**
    * Constructs a new ProcessRequestsApi. 
    * @alias module:api/ProcessRequestsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteProcessRequest operation.
     * @callback module:api/ProcessRequestsApi~deleteProcessRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a process request
     * Delete a request
     * @param {Number} processRequestId ID of process request to return
     * @param {module:api/ProcessRequestsApi~deleteProcessRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessRequest}
     */
    deleteProcessRequest(processRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'processRequestId' is set
      if (processRequestId === undefined || processRequestId === null) {
        throw new Error("Missing the required parameter 'processRequestId' when calling deleteProcessRequest");
      }

      let pathParams = {
        'process_request_id': processRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessRequest;
      return this.apiClient.callApi(
        '/requests/{process_request_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProcessRequestById operation.
     * @callback module:api/ProcessRequestsApi~getProcessRequestByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get single process request by ID
     * Display the specified resource.
     * @param {Number} processRequestId ID of process request to return
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Include data from related models in payload. Comma separated list. (default to '')
     * @param {module:api/ProcessRequestsApi~getProcessRequestByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessRequest}
     */
    getProcessRequestById(processRequestId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'processRequestId' is set
      if (processRequestId === undefined || processRequestId === null) {
        throw new Error("Missing the required parameter 'processRequestId' when calling getProcessRequestById");
      }

      let pathParams = {
        'process_request_id': processRequestId
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessRequest;
      return this.apiClient.callApi(
        '/requests/{process_request_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProcessesRequests operation.
     * @callback module:api/ProcessRequestsApi~getProcessesRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all process Requests that the user has access to
     * Display a listing of the resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type Only return requests by type (all|in_progress|completed)
     * @param {String} opts.filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring.
     * @param {String} opts.orderBy Field to order results by
     * @param {module:model/String} opts.orderDirection  (default to 'asc')
     * @param {Number} opts.perPage 
     * @param {String} opts.include Include data from related models in payload. Comma separated list. (default to '')
     * @param {module:api/ProcessRequestsApi~getProcessesRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20013}
     */
    getProcessesRequests(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'per_page': opts['perPage'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;
      return this.apiClient.callApi(
        '/requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProcessRequest operation.
     * @callback module:api/ProcessRequestsApi~updateProcessRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a process request
     * Update a request
     * @param {Number} processRequestId ID of process request to return
     * @param {module:model/ProcessRequestEditable} processRequestEditable 
     * @param {module:api/ProcessRequestsApi~updateProcessRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProcessRequest(processRequestId, processRequestEditable, callback) {
      let postBody = processRequestEditable;
      // verify the required parameter 'processRequestId' is set
      if (processRequestId === undefined || processRequestId === null) {
        throw new Error("Missing the required parameter 'processRequestId' when calling updateProcessRequest");
      }
      // verify the required parameter 'processRequestEditable' is set
      if (processRequestEditable === undefined || processRequestEditable === null) {
        throw new Error("Missing the required parameter 'processRequestEditable' when calling updateProcessRequest");
      }

      let pathParams = {
        'process_request_id': processRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/requests/{process_request_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProcessRequestEvent operation.
     * @callback module:api/ProcessRequestsApi~updateProcessRequestEventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a process request event
     * Trigger a intermediate catch event
     * @param {String} processRequestId ID of process request to return
     * @param {String} eventId ID of process event to return
     * @param {module:api/ProcessRequestsApi~updateProcessRequestEventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProcessRequestEvent(processRequestId, eventId, callback) {
      let postBody = null;
      // verify the required parameter 'processRequestId' is set
      if (processRequestId === undefined || processRequestId === null) {
        throw new Error("Missing the required parameter 'processRequestId' when calling updateProcessRequestEvent");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling updateProcessRequestEvent");
      }

      let pathParams = {
        'process_request_id': processRequestId,
        'event_id': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/requests/{process_request_id}/events/{event_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
