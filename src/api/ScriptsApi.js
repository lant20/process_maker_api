/**
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject10 from '../model/InlineObject10';
import InlineObject11 from '../model/InlineObject11';
import InlineResponse20019 from '../model/InlineResponse20019';
import Scripts from '../model/Scripts';
import ScriptsEditable from '../model/ScriptsEditable';
import ScriptsPreview from '../model/ScriptsPreview';

/**
* Scripts service.
* @module api/ScriptsApi
* @version 1.0.0
*/
export default class ScriptsApi {

    /**
    * Constructs a new ScriptsApi. 
    * @alias module:api/ScriptsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createScript operation.
     * @callback module:api/ScriptsApi~createScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scripts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a new script
     * Create a new script in a process.
     * @param {module:model/ScriptsEditable} scriptsEditable 
     * @param {module:api/ScriptsApi~createScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scripts}
     */
    createScript(scriptsEditable, callback) {
      let postBody = scriptsEditable;
      // verify the required parameter 'scriptsEditable' is set
      if (scriptsEditable === undefined || scriptsEditable === null) {
        throw new Error("Missing the required parameter 'scriptsEditable' when calling createScript");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Scripts;
      return this.apiClient.callApi(
        '/scripts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScript operation.
     * @callback module:api/ScriptsApi~deleteScriptCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a script
     * Delete a script in a process.
     * @param {String} scriptId ID of script to return
     * @param {module:api/ScriptsApi~deleteScriptCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScript(scriptId, callback) {
      let postBody = null;
      // verify the required parameter 'scriptId' is set
      if (scriptId === undefined || scriptId === null) {
        throw new Error("Missing the required parameter 'scriptId' when calling deleteScript");
      }

      let pathParams = {
        'script_id': scriptId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scripts/{script_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the duplicateScript operation.
     * @callback module:api/ScriptsApi~duplicateScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scripts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * duplicate a script
     * duplicate a Script.
     * @param {String} scriptsId ID of script to return
     * @param {module:model/ScriptsEditable} scriptsEditable 
     * @param {module:api/ScriptsApi~duplicateScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scripts}
     */
    duplicateScript(scriptsId, scriptsEditable, callback) {
      let postBody = scriptsEditable;
      // verify the required parameter 'scriptsId' is set
      if (scriptsId === undefined || scriptsId === null) {
        throw new Error("Missing the required parameter 'scriptsId' when calling duplicateScript");
      }
      // verify the required parameter 'scriptsEditable' is set
      if (scriptsEditable === undefined || scriptsEditable === null) {
        throw new Error("Missing the required parameter 'scriptsEditable' when calling duplicateScript");
      }

      let pathParams = {
        'scripts_id': scriptsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Scripts;
      return this.apiClient.callApi(
        '/scripts/{scripts_id}/duplicate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeScript operation.
     * @callback module:api/ScriptsApi~executeScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptsPreview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute script
     * Executes a script, with sample data/config data
     * @param {Number} scriptId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject11} opts.inlineObject11 
     * @param {module:api/ScriptsApi~executeScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptsPreview}
     */
    executeScript(scriptId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject11'];
      // verify the required parameter 'scriptId' is set
      if (scriptId === undefined || scriptId === null) {
        throw new Error("Missing the required parameter 'scriptId' when calling executeScript");
      }

      let pathParams = {
        'script_id': scriptId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScriptsPreview;
      return this.apiClient.callApi(
        '/scripts/execute/{script_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScriptExecutionResponse operation.
     * @callback module:api/ScriptsApi~getScriptExecutionResponseCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the response of a script execution by execution key
     * Get the response of a script execution
     * @param {String} key 
     * @param {module:api/ScriptsApi~getScriptExecutionResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getScriptExecutionResponse(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getScriptExecutionResponse");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/scripts/execution/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScripts operation.
     * @callback module:api/ScriptsApi~getScriptsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20019} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all scripts that the user has access to
     * Get a list of scripts in a process.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter results by string. Searches Name, Description, and Status. Status must match exactly. Others can be a substring.
     * @param {String} opts.orderBy Field to order results by
     * @param {module:model/String} opts.orderDirection  (default to 'asc')
     * @param {Number} opts.perPage 
     * @param {String} opts.include Include data from related models in payload. Comma separated list. (default to '')
     * @param {module:api/ScriptsApi~getScriptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20019}
     */
    getScripts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'per_page': opts['perPage'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20019;
      return this.apiClient.callApi(
        '/scripts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScriptsById operation.
     * @callback module:api/ScriptsApi~getScriptsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scripts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get single script by ID
     * Get a single script in a process.
     * @param {String} scriptId ID of script to return
     * @param {module:api/ScriptsApi~getScriptsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scripts}
     */
    getScriptsById(scriptId, callback) {
      let postBody = null;
      // verify the required parameter 'scriptId' is set
      if (scriptId === undefined || scriptId === null) {
        throw new Error("Missing the required parameter 'scriptId' when calling getScriptsById");
      }

      let pathParams = {
        'script_id': scriptId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Scripts;
      return this.apiClient.callApi(
        '/scripts/{script_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the previewScript operation.
     * @callback module:api/ScriptsApi~previewScriptCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test script code without saving it
     * Previews executing a script, with sample data/config data
     * @param {Number} scriptId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject10} opts.inlineObject10 
     * @param {module:api/ScriptsApi~previewScriptCallback} callback The callback function, accepting three arguments: error, data, response
     */
    previewScript(scriptId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject10'];
      // verify the required parameter 'scriptId' is set
      if (scriptId === undefined || scriptId === null) {
        throw new Error("Missing the required parameter 'scriptId' when calling previewScript");
      }

      let pathParams = {
        'script_id': scriptId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scripts/{script_id}/preview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScript operation.
     * @callback module:api/ScriptsApi~updateScriptCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a script
     * Update a script in a process.
     * @param {String} scriptId ID of script to return
     * @param {module:model/ScriptsEditable} scriptsEditable 
     * @param {module:api/ScriptsApi~updateScriptCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateScript(scriptId, scriptsEditable, callback) {
      let postBody = scriptsEditable;
      // verify the required parameter 'scriptId' is set
      if (scriptId === undefined || scriptId === null) {
        throw new Error("Missing the required parameter 'scriptId' when calling updateScript");
      }
      // verify the required parameter 'scriptsEditable' is set
      if (scriptsEditable === undefined || scriptsEditable === null) {
        throw new Error("Missing the required parameter 'scriptsEditable' when calling updateScript");
      }

      let pathParams = {
        'script_id': scriptId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scripts/{script_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
