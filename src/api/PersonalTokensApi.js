/**
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject14 from '../model/InlineObject14';
import InlineResponse20030 from '../model/InlineResponse20030';
import UserToken from '../model/UserToken';

/**
* PersonalTokens service.
* @module api/PersonalTokensApi
* @version 1.0.0
*/
export default class PersonalTokensApi {

    /**
    * Constructs a new PersonalTokensApi. 
    * @alias module:api/PersonalTokensApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTokens operation.
     * @callback module:api/PersonalTokensApi~createTokensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new token for a specific user
     * Create a new personal access token for the user.
     * @param {Number} userId User id
     * @param {module:model/InlineObject14} inlineObject14 
     * @param {module:api/PersonalTokensApi~createTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserToken}
     */
    createTokens(userId, inlineObject14, callback) {
      let postBody = inlineObject14;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createTokens");
      }
      // verify the required parameter 'inlineObject14' is set
      if (inlineObject14 === undefined || inlineObject14 === null) {
        throw new Error("Missing the required parameter 'inlineObject14' when calling createTokens");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserToken;
      return this.apiClient.callApi(
        '/users/{user_id}/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteToken operation.
     * @callback module:api/PersonalTokensApi~deleteTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a token
     * Delete the given token for a user
     * @param {Number} userId User ID
     * @param {String} tokenId Token ID
     * @param {module:api/PersonalTokensApi~deleteTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteToken(userId, tokenId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteToken");
      }
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling deleteToken");
      }

      let pathParams = {
        'user_id': userId,
        'token_id': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/tokens/{token_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokenById operation.
     * @callback module:api/PersonalTokensApi~getTokenByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get single token by ID
     * Show a personal access token for the user
     * @param {Number} userId ID of user
     * @param {String} tokenId ID of token to return
     * @param {module:api/PersonalTokensApi~getTokenByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserToken}
     */
    getTokenById(userId, tokenId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getTokenById");
      }
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling getTokenById");
      }

      let pathParams = {
        'user_id': userId,
        'token_id': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserToken;
      return this.apiClient.callApi(
        '/users/{user_id}/tokens/{token_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokens operation.
     * @callback module:api/PersonalTokensApi~getTokensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20030} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display listing of access tokens for the specified user.
     * Display listing of access tokens for the specified user.
     * @param {Number} userId User id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.perPage 
     * @param {module:api/PersonalTokensApi~getTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20030}
     */
    getTokens(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getTokens");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pm_api_auth_code', 'pm_api_bearer', 'pm_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20030;
      return this.apiClient.callApi(
        '/users/{user_id}/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
