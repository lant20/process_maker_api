/**
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProcessStartEvents model module.
 * @module model/ProcessStartEvents
 * @version 1.0.0
 */
class ProcessStartEvents {
    /**
     * Constructs a new <code>ProcessStartEvents</code>.
     * @alias module:model/ProcessStartEvents
     */
    constructor() { 
        
        ProcessStartEvents.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProcessStartEvents</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProcessStartEvents} obj Optional instance to populate.
     * @return {module:model/ProcessStartEvents} The populated <code>ProcessStartEvents</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProcessStartEvents();

            if (data.hasOwnProperty('eventDefinitions')) {
                obj['eventDefinitions'] = ApiClient.convertToType(data['eventDefinitions'], Object);
            }
            if (data.hasOwnProperty('parallelMultiple')) {
                obj['parallelMultiple'] = ApiClient.convertToType(data['parallelMultiple'], 'Boolean');
            }
            if (data.hasOwnProperty('outgoing')) {
                obj['outgoing'] = ApiClient.convertToType(data['outgoing'], Object);
            }
            if (data.hasOwnProperty('incoming')) {
                obj['incoming'] = ApiClient.convertToType(data['incoming'], Object);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Object} eventDefinitions
 */
ProcessStartEvents.prototype['eventDefinitions'] = undefined;

/**
 * @member {Boolean} parallelMultiple
 */
ProcessStartEvents.prototype['parallelMultiple'] = undefined;

/**
 * @member {Object} outgoing
 */
ProcessStartEvents.prototype['outgoing'] = undefined;

/**
 * @member {Object} incoming
 */
ProcessStartEvents.prototype['incoming'] = undefined;

/**
 * @member {String} id
 */
ProcessStartEvents.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ProcessStartEvents.prototype['name'] = undefined;






export default ProcessStartEvents;

