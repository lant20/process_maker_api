/**
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommentsAllOf from './CommentsAllOf';
import CommentsEditable from './CommentsEditable';

/**
 * The Comments model module.
 * @module model/Comments
 * @version 1.0.0
 */
class Comments {
    /**
     * Constructs a new <code>Comments</code>.
     * Represents a business process definition.
     * @alias module:model/Comments
     * @implements module:model/CommentsAllOf
     * @implements module:model/CommentsEditable
     */
    constructor() { 
        CommentsAllOf.initialize(this);CommentsEditable.initialize(this);
        Comments.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Comments</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Comments} obj Optional instance to populate.
     * @return {module:model/Comments} The populated <code>Comments</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Comments();
            CommentsAllOf.constructFromObject(data, obj);
            CommentsEditable.constructFromObject(data, obj);

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('commentable_id')) {
                obj['commentable_id'] = ApiClient.convertToType(data['commentable_id'], 'String');
            }
            if (data.hasOwnProperty('commentable_type')) {
                obj['commentable_type'] = ApiClient.convertToType(data['commentable_type'], 'String');
            }
            if (data.hasOwnProperty('up')) {
                obj['up'] = ApiClient.convertToType(data['up'], 'Number');
            }
            if (data.hasOwnProperty('down')) {
                obj['down'] = ApiClient.convertToType(data['down'], 'Number');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Date} created_at
 */
Comments.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
Comments.prototype['updated_at'] = undefined;

/**
 * @member {String} id
 */
Comments.prototype['id'] = undefined;

/**
 * @member {String} user_id
 */
Comments.prototype['user_id'] = undefined;

/**
 * @member {String} commentable_id
 */
Comments.prototype['commentable_id'] = undefined;

/**
 * @member {String} commentable_type
 */
Comments.prototype['commentable_type'] = undefined;

/**
 * @member {Number} up
 */
Comments.prototype['up'] = undefined;

/**
 * @member {Number} down
 */
Comments.prototype['down'] = undefined;

/**
 * @member {String} subject
 */
Comments.prototype['subject'] = undefined;

/**
 * @member {String} body
 */
Comments.prototype['body'] = undefined;

/**
 * @member {Boolean} hidden
 */
Comments.prototype['hidden'] = undefined;

/**
 * @member {module:model/Comments.TypeEnum} type
 */
Comments.prototype['type'] = undefined;


// Implement CommentsAllOf interface:
/**
 * @member {Date} created_at
 */
CommentsAllOf.prototype['created_at'] = undefined;
/**
 * @member {Date} updated_at
 */
CommentsAllOf.prototype['updated_at'] = undefined;
// Implement CommentsEditable interface:
/**
 * @member {String} id
 */
CommentsEditable.prototype['id'] = undefined;
/**
 * @member {String} user_id
 */
CommentsEditable.prototype['user_id'] = undefined;
/**
 * @member {String} commentable_id
 */
CommentsEditable.prototype['commentable_id'] = undefined;
/**
 * @member {String} commentable_type
 */
CommentsEditable.prototype['commentable_type'] = undefined;
/**
 * @member {Number} up
 */
CommentsEditable.prototype['up'] = undefined;
/**
 * @member {Number} down
 */
CommentsEditable.prototype['down'] = undefined;
/**
 * @member {String} subject
 */
CommentsEditable.prototype['subject'] = undefined;
/**
 * @member {String} body
 */
CommentsEditable.prototype['body'] = undefined;
/**
 * @member {Boolean} hidden
 */
CommentsEditable.prototype['hidden'] = undefined;
/**
 * @member {module:model/CommentsEditable.TypeEnum} type
 */
CommentsEditable.prototype['type'] = undefined;



/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Comments['TypeEnum'] = {

    /**
     * value: "LOG"
     * @const
     */
    "LOG": "LOG",

    /**
     * value: "MESSAGE"
     * @const
     */
    "MESSAGE": "MESSAGE"
};



export default Comments;

