/**
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScreenTypeAllOf from './ScreenTypeAllOf';
import ScreenTypeEditable from './ScreenTypeEditable';

/**
 * The ScreenType model module.
 * @module model/ScreenType
 * @version 1.0.0
 */
class ScreenType {
    /**
     * Constructs a new <code>ScreenType</code>.
     * Represents a business screen Type definition.
     * @alias module:model/ScreenType
     * @implements module:model/ScreenTypeAllOf
     * @implements module:model/ScreenTypeEditable
     */
    constructor() { 
        ScreenTypeAllOf.initialize(this);ScreenTypeEditable.initialize(this);
        ScreenType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScreenType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScreenType} obj Optional instance to populate.
     * @return {module:model/ScreenType} The populated <code>ScreenType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScreenType();
            ScreenTypeAllOf.constructFromObject(data, obj);
            ScreenTypeEditable.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
ScreenType.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ScreenType.prototype['name'] = undefined;


// Implement ScreenTypeAllOf interface:
/**
 * @member {String} id
 */
ScreenTypeAllOf.prototype['id'] = undefined;
// Implement ScreenTypeEditable interface:
/**
 * @member {String} name
 */
ScreenTypeEditable.prototype['name'] = undefined;




export default ScreenType;

