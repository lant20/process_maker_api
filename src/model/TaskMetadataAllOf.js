/**
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TaskMetadataAllOf model module.
 * @module model/TaskMetadataAllOf
 * @version 1.0.0
 */
class TaskMetadataAllOf {
    /**
     * Constructs a new <code>TaskMetadataAllOf</code>.
     * @alias module:model/TaskMetadataAllOf
     */
    constructor() { 
        
        TaskMetadataAllOf.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskMetadataAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskMetadataAllOf} obj Optional instance to populate.
     * @return {module:model/TaskMetadataAllOf} The populated <code>TaskMetadataAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskMetadataAllOf();

            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('sort_by')) {
                obj['sort_by'] = ApiClient.convertToType(data['sort_by'], 'String');
            }
            if (data.hasOwnProperty('sort_order')) {
                obj['sort_order'] = ApiClient.convertToType(data['sort_order'], 'String');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('total_pages')) {
                obj['total_pages'] = ApiClient.convertToType(data['total_pages'], 'Number');
            }
            if (data.hasOwnProperty('current_page')) {
                obj['current_page'] = ApiClient.convertToType(data['current_page'], 'Number');
            }
            if (data.hasOwnProperty('form')) {
                obj['form'] = ApiClient.convertToType(data['form'], 'Number');
            }
            if (data.hasOwnProperty('last_page')) {
                obj['last_page'] = ApiClient.convertToType(data['last_page'], 'Number');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('per_page')) {
                obj['per_page'] = ApiClient.convertToType(data['per_page'], 'Number');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'Number');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('in_overdue')) {
                obj['in_overdue'] = ApiClient.convertToType(data['in_overdue'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {String} filter
 */
TaskMetadataAllOf.prototype['filter'] = undefined;

/**
 * @member {String} sort_by
 */
TaskMetadataAllOf.prototype['sort_by'] = undefined;

/**
 * @member {module:model/TaskMetadataAllOf.SortOrderEnum} sort_order
 */
TaskMetadataAllOf.prototype['sort_order'] = undefined;

/**
 * @member {Number} count
 */
TaskMetadataAllOf.prototype['count'] = undefined;

/**
 * @member {Number} total_pages
 */
TaskMetadataAllOf.prototype['total_pages'] = undefined;

/**
 * @member {Number} current_page
 */
TaskMetadataAllOf.prototype['current_page'] = undefined;

/**
 * @member {Number} form
 */
TaskMetadataAllOf.prototype['form'] = undefined;

/**
 * @member {Number} last_page
 */
TaskMetadataAllOf.prototype['last_page'] = undefined;

/**
 * @member {String} path
 */
TaskMetadataAllOf.prototype['path'] = undefined;

/**
 * @member {Number} per_page
 */
TaskMetadataAllOf.prototype['per_page'] = undefined;

/**
 * @member {Number} to
 */
TaskMetadataAllOf.prototype['to'] = undefined;

/**
 * @member {Number} total
 */
TaskMetadataAllOf.prototype['total'] = undefined;

/**
 * @member {Number} in_overdue
 */
TaskMetadataAllOf.prototype['in_overdue'] = undefined;





/**
 * Allowed values for the <code>sort_order</code> property.
 * @enum {String}
 * @readonly
 */
TaskMetadataAllOf['SortOrderEnum'] = {

    /**
     * value: "asc"
     * @const
     */
    "asc": "asc",

    /**
     * value: "desc"
     * @const
     */
    "desc": "desc"
};



export default TaskMetadataAllOf;

