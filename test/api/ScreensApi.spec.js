/**
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ProcessMakerApi);
  }
}(this, function(expect, ProcessMakerApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ProcessMakerApi.ScreensApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ScreensApi', function() {
    describe('createScreen', function() {
      it('should call createScreen successfully', function(done) {
        //uncomment below and update the code to test createScreen
        //instance.createScreen(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteScreen', function() {
      it('should call deleteScreen successfully', function(done) {
        //uncomment below and update the code to test deleteScreen
        //instance.deleteScreen(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('duplicateScreen', function() {
      it('should call duplicateScreen successfully', function(done) {
        //uncomment below and update the code to test duplicateScreen
        //instance.duplicateScreen(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportScreen', function() {
      it('should call exportScreen successfully', function(done) {
        //uncomment below and update the code to test exportScreen
        //instance.exportScreen(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getScreens', function() {
      it('should call getScreens successfully', function(done) {
        //uncomment below and update the code to test getScreens
        //instance.getScreens(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getScreensById', function() {
      it('should call getScreensById successfully', function(done) {
        //uncomment below and update the code to test getScreensById
        //instance.getScreensById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importScreen', function() {
      it('should call importScreen successfully', function(done) {
        //uncomment below and update the code to test importScreen
        //instance.importScreen(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('preview', function() {
      it('should call preview successfully', function(done) {
        //uncomment below and update the code to test preview
        //instance.preview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateScreen', function() {
      it('should call updateScreen successfully', function(done) {
        //uncomment below and update the code to test updateScreen
        //instance.updateScreen(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
