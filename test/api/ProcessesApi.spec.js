/**
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ProcessMakerApi);
  }
}(this, function(expect, ProcessMakerApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ProcessMakerApi.ProcessesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProcessesApi', function() {
    describe('assignmentProcess', function() {
      it('should call assignmentProcess successfully', function(done) {
        //uncomment below and update the code to test assignmentProcess
        //instance.assignmentProcess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('call6a131993b7c879ddcd3d3a291dd8380f', function() {
      it('should call call6a131993b7c879ddcd3d3a291dd8380f successfully', function(done) {
        //uncomment below and update the code to test call6a131993b7c879ddcd3d3a291dd8380f
        //instance.call6a131993b7c879ddcd3d3a291dd8380f(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProcess', function() {
      it('should call createProcess successfully', function(done) {
        //uncomment below and update the code to test createProcess
        //instance.createProcess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProcess', function() {
      it('should call deleteProcess successfully', function(done) {
        //uncomment below and update the code to test deleteProcess
        //instance.deleteProcess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportProcess', function() {
      it('should call exportProcess successfully', function(done) {
        //uncomment below and update the code to test exportProcess
        //instance.exportProcess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessById', function() {
      it('should call getProcessById successfully', function(done) {
        //uncomment below and update the code to test getProcessById
        //instance.getProcessById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcesses', function() {
      it('should call getProcesses successfully', function(done) {
        //uncomment below and update the code to test getProcesses
        //instance.getProcesses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importProcess', function() {
      it('should call importProcess successfully', function(done) {
        //uncomment below and update the code to test importProcess
        //instance.importProcess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restoreProcess', function() {
      it('should call restoreProcess successfully', function(done) {
        //uncomment below and update the code to test restoreProcess
        //instance.restoreProcess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startProcesses', function() {
      it('should call startProcesses successfully', function(done) {
        //uncomment below and update the code to test startProcesses
        //instance.startProcesses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('triggerStartEvent', function() {
      it('should call triggerStartEvent successfully', function(done) {
        //uncomment below and update the code to test triggerStartEvent
        //instance.triggerStartEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProcess', function() {
      it('should call updateProcess successfully', function(done) {
        //uncomment below and update the code to test updateProcess
        //instance.updateProcess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
