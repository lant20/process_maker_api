/**
 * ProcessMaker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@processmaker.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ProcessMakerApi);
  }
}(this, function(expect, ProcessMakerApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ProcessMakerApi.ScriptsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ScriptsApi', function() {
    describe('createScript', function() {
      it('should call createScript successfully', function(done) {
        //uncomment below and update the code to test createScript
        //instance.createScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteScript', function() {
      it('should call deleteScript successfully', function(done) {
        //uncomment below and update the code to test deleteScript
        //instance.deleteScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('duplicateScript', function() {
      it('should call duplicateScript successfully', function(done) {
        //uncomment below and update the code to test duplicateScript
        //instance.duplicateScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('executeScript', function() {
      it('should call executeScript successfully', function(done) {
        //uncomment below and update the code to test executeScript
        //instance.executeScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getScriptExecutionResponse', function() {
      it('should call getScriptExecutionResponse successfully', function(done) {
        //uncomment below and update the code to test getScriptExecutionResponse
        //instance.getScriptExecutionResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getScripts', function() {
      it('should call getScripts successfully', function(done) {
        //uncomment below and update the code to test getScripts
        //instance.getScripts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getScriptsById', function() {
      it('should call getScriptsById successfully', function(done) {
        //uncomment below and update the code to test getScriptsById
        //instance.getScriptsById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('previewScript', function() {
      it('should call previewScript successfully', function(done) {
        //uncomment below and update the code to test previewScript
        //instance.previewScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateScript', function() {
      it('should call updateScript successfully', function(done) {
        //uncomment below and update the code to test updateScript
        //instance.updateScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
